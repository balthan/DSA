/** Add a new key/value pair to the node. There might be a
    subtree associated with the record being added. This
    information comes in the form of a 2-3 tree node with
    one key and a (possibly null) subtree through the
    center pointer field. */
  public TTNode<Key,E> add(TTNode<Key,E> it) {
    if (rkey == null) { // Only one key, add here
      if (lkey.compareTo(it.lkey()) < 0) {
	rkey = it.lkey(); rval = it.lval();
        right = center; center = it.cchild();
      }
      else {
	rkey = lkey; rval = lval; right = center;
        lkey = it.lkey(); lval = it.lval();
        center = it.cchild();
      }
      return this;
    }
    else if (lkey.compareTo(it.lkey()) >= 0) { // Add left
      center = new TTNode<Key,E>(rkey, rval, null, null,
                               center, right, null);
      rkey = null; rval = null; right = null;
      it.setLeftChild(left); left = it;
      return this;
    }
    else if (rkey.compareTo(it.lkey()) < 0) { // Add center
      it.setCenterChild(new TTNode<Key,E>(rkey, rval, null,
                          null, it.cchild(), right, null));
      it.setLeftChild(this);
      rkey = null; rval = null; right = null;
      return it;
    }
    else { // Add right
      TTNode<Key,E> N1 = new TTNode<Key,E>(rkey, rval, null,
                                   null, this, it, null);
      it.setLeftChild(right);
      right = null; rkey = null; rval = null;
      return N1;
    }
  }
