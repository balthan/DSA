/** Huffman coding tree Main program.
    First, read from the data file a set of strings and associated
    frequencies.  These are placed onto a list of (single node)
    Huffman trees.  Next, build a single Huffman coding tree for
    the set.  The strings and their codes are then output, with
    CodeTable storing the coding for each input string.  Next, read
    commands to "encode" or "decode" strings, providing the
    appropriate output.

    This distribution should come with three test files: huffex.dat,
    hufftest.dat, and huffbook.dat. You can use any of these to test the
    program by reading them in from standard input. For example (in
    Linux) type to the command prompt:

    java Huffman < huffbook.dat
*/

import java.io.*;
import java.util.*;

public class Huffman {

private static Vector<Code> codeTable = new Vector<Code>(); // The code lookup table
private static int total = 0;  // Total weight of codes
private static MinHeap<HuffTree<Character>> Hheap;
private static HuffTree<Character>[] TreeArray;

/** Read a list of strings and frequencies,
    creating initial list of Huffman coding tree nodes */
@SuppressWarnings("unchecked")  // Allow the generic array allocation 
static void readFreqs(BufferedReader d) throws IOException {
  String line;
  char letter;
  int freq;

  line = d.readLine();
  assert (line != null) : "Bad input file";
  int count = Integer.parseInt(line);
  TreeArray = (HuffTree<Character>[])new HuffTree[count];
  for (int i=0; i<count; i++) {
    // process the entry, creating a new HuffTree
    line = d.readLine();
    assert (line != null) : "Not enough characters";
    letter = line.charAt(0);
    freq = Integer.parseInt(line.substring(2));
    TreeArray[i] = new HuffTree<Character>(letter, freq);
  }
  Hheap = new MinHeap<HuffTree<Character>>(TreeArray, count, count);
}
