/** Set curr at list end */
public void moveToEnd()
{ curr = tail; }

/** Move curr one step left; no change if now at front */
public void prev() {
  if (curr == head) return; // No previous element
  Link<E> temp = head;
  // March down list until we find the previous element
  while (temp.next() != curr) temp = temp.next();
  curr = temp;
}

/** Move curr one step right; no change if now at end */
public void next()
  { if (curr != tail) curr = curr.next(); }

/** @return List length */
public int length() { return cnt; }

/** @return The position of the current element */
public int currPos() {
  Link<E> temp = head;
  int i;
  for (i=0; curr != temp; i++)
    temp = temp.next();
  return i;
}

/** Move down list to "pos" position */
public void moveToPos(int pos) {
  assert (pos>=0) && (pos<=cnt) : "Position out of range";
  curr = head;
  for(int i=0; i<pos; i++) curr = curr.next();
}

/** @return Current element value */
public E getValue() {
  if(curr.next() == null) return null;
  return curr.next().element();
}
