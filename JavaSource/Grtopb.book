static void topsort(Graph G) { // Topological sort: Queue
  Queue<Integer> Q = new AQueue<Integer>(G.n());
  int[] Count = new int[G.n()];
  int v;
  for (v=0; v<G.n(); v++) Count[v] = 0; // Initialize
  for (v=0; v<G.n(); v++)      // Process every edge
    for (int w = G.first(v); w < G.n(); w = G.next(v, w))
       Count[w]++;             // Add to v's prereq count
  for (v=0; v<G.n(); v++)      // Initialize Queue
    if (Count[v] == 0)         // V has no prerequisites
      Q.enqueue(v);
  while (Q.length() > 0) {     // Process the vertices
    v = Q.dequeue().intValue();
    printout(v);               // PreVisit for Vertex V
    for (int w = G.first(v); w < G.n(); w = G.next(v, w)) {
      Count[w]--;              // One less prerequisite
      if (Count[w] == 0)       // This vertex is now free
        Q.enqueue(w);
    }
  }
}
