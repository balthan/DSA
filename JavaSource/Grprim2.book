/** Prims's MST algorithm: priority queue version */
static void Prim(Graph G, int s, int[] D, int[] V) {
  int v;                               // The current vertex
  DijkElem[] E = new DijkElem[G.e()];  // Heap for edges
  E[0] = new DijkElem(s, 0);           // Initial vertex
  MinHeap<DijkElem> H = new MinHeap<DijkElem>(E, 1, G.e());
  for (int i=0; i<G.n(); i++)          // Initialize
    D[i] = Integer.MAX_VALUE;          //   distances
  D[s] = 0;
  for (int i=0; i<G.n(); i++) {        // Now, get distances
    do { v = (H.removemin()).vertex(); } // Get position
      while (G.getMark(v) == VISITED);
    G.setMark(v, VISITED);
    if (v != s) AddEdgetoMST(V[v], v); // Add edge to MST
    if (D[v] == Integer.MAX_VALUE) return; // Unreachable
    for (int w = G.first(v); w < G.n(); w = G.next(v, w))
      if (D[w] > G.weight(v, w)) {     // Update D
        D[w] = G.weight(v, w);
        V[w] = v;                      // Where it came from
        H.insert(new DijkElem(w, D[w]));
      }
  }
}
